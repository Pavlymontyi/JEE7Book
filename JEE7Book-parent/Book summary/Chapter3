Валидация компонентов

Валидация распределена по разным уровням приложения (от клиента
до базы данных) и используется в разных технологиях (JavaScript, Java, DDL, XSD).
Валидация компонентов (Bean Validation) — это технология, ориентированная на
Java, хотя и предпринимаются попытки интегрировать другие валидационные языки,
в частности DDL или XSD. Валидация компонентов позволяет вам написать ограни-
чение лишь однажды и использовать его на любом уровне приложения.

Валидация компонентов позволяет применять уже готовые, заранее определен-
ные ограничения, а также писать собственные ограничения и также использовать
их для валидации компонентов, атрибутов, конструкторов, возвращаемых типов

Пример ограничения:
public class Book {
    @NotNull @Min(2)
    private Float price;
}

Ограничение при валидации компонентов состоит из:
 аннотации, определяющей ограничение;
 списка классов, реализующих ограничивающий алгоритм с заданным типом.

Класс реализации реализует интерфейс ConstraintValidator и ис-
пользует дженерики для передачи имени аннотации (NotNull) и типа, к которому
применяется аннотация (в данном случае это Object).

public class NotNullValidator implements ConstraintValidator<NotNull, Object>
{
    public void initialize(NotNull parameters) {}
    public boolean isValid(Object object, ConstraintValidatorContext context) {
        return object != null;
    }
}

Ограничения можно применять к элементам следующих типов:
    FIELD           - атрибуты (поля)
    METHOD          - геттеры и методы, возвращающие значения
    CONSTRUCTOR     -
    PARAMETER       - параметры
    TYPE            - компоненты, интерфейсы и суперклассы ???
    ANNOTATION_TYPE - ограничения, состоящие из других ограничений ???

Видно, что ограничивающие аннотации могут применяться с большинством
элементов, определяемых в Java. Только статические поля и статические
методы не могут проверяться валидацией компонентов.

Встроенные ограничения
В спецификации Bean Validation существуют встроенные ограничения: NotNull, Digits, Size, Pattern и тд.

Определение собственных ограничений
Есть разные способы создавать собственные ограничения.
При определении ограничивающей аннотации есть три обязательных атрибута: message, groups и payload

Объединение ограничений
Удобный способ создания новых ограничений — агрегирование (объединение) уже
имеющихся. В таком случае мы обходимся без класса реализации. Это совсем не
сложно сделать, если имеющиеся ограничения обладают @Target(ElementType.ANNOTATION_
TYPE), то есть при работе с ними одна аннотация может быть применена
к другой. Такой подход называется «объединением ограничений» и позволяет
создавать высокоуровневые ограничения.

@Constraint(validatedBy = {})
@Target... @Retention...
@NotNull @Size(min = 7) @Pattern(regexp = "...")
public @interface Email {
    String message() default "Неверный электронный адрес";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
}

Обобщенное ограничение
Часто приходится добавлять к вашей ограничивающей аннотации класс реализации.

1) Аннотация:
@Constraint(validatedBy = {URLValidator.class})
Target... @Retention...
public @interface URL {
    String message() default "Malformed URL";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};

    String protocol() default "";
    String host()     default "";
    int port()        default -1;
}

2) Имплементация:
public class URLValidator implements ConstraintValidator<URL, String> {
    String protocol, host; int port;

    public void initialize(URL url) {
        this.protocol = url.protocol(); this.host = url.host(); this.port = url.port();
    }

    public boolean isValid(String value, ConstraintValidatorContext constraintValidatorContext) {
        if (value == null || value.length() == 0) {
            return true;
        }
        java.net.URL url;
        try {
            // Преобразуем URL в java.net.URL для проверки того, имеет ли URL допустимый формат
            url = new java.net.URL(value);
        } catch (MalformedURLException e) {
            return false;
        }
        // Проверяет, имеет ли атрибут протокола допустимое значение
        if (protocol != null && protocol.length() > 0 && !url.getProtocol().equals(protocol)) {
            return false;
        }
        if (host != null && host.length() > 0 && !url.getHost().startsWith(host)) {
            return false;
        }
        if (port != -1 && url.getPort() != port) {
            return false;
        }
        return true;
    }
}

3) Использование:
public class ItemServerConnection {
    @URL
    private String resourceURL;

    @NotNull @URL(protocol = "http", host = "www.cdbookstore.com")
    private String itemURL;
}


Множественные ограничения для одной целевой сущности
Множественные ограничения используют оператор AND. Это означает, что для валидности атрибута
orderId необходимо, чтобы он удовлетворял двум регулярным выражениям.

public class Order {
    @Pattern.List({
        @Pattern(regexp = "[C,D,M][A-Z][0-9]*"),
        @Pattern(regexp = ".[A-Z].*?")
    })
    private String orderId;
}

Ограничения на уровне класса
Можно выразить ограничение на основе нескольких свойств, которыми обладает заданный класс.

@Constraint(validatedBy = ChronologicalDatesValidator.class)
public @interface ChronologicalDates {}

public class ChronologicalDatesValidator implements ConstraintValidator<ChronologicalDates, Order> {
    @Override
    public void initialize(ChronologicalDates chronologicalDates) {}

    @Override
    public boolean isValid(Order order, ConstraintValidatorContext constraintValidatorContext) {
        return order.getCreationDate().getTime() < order.getPaymentDate().getTime() &&
               order.getPaymentDate().getTime()  < order.getDeliveryDate().getTime();
    }
}

@ChronologicalDates
public class Order {
    ...
    private Date creationDate;
    private Date paymentDate;
    private Date deliveryDate;
    ...
}

Ограничение на уровне метода - в книге какая-то чушь непонятная с плохим примером.

Наследование ограничений
Наследование ограничений работает точно так же, как и обычное наследование в Java: оно является кумуля-
тивным. Таким образом, если один компонент наследует от другого, то ограничения
наследуемого компонента также заимствуются и будут валидироваться.
Но в случае переопределения метода нужно уделять особое внимание при опреде-
лении ограничений для параметров. Лишь корневая версия переопределяемого
метода может аннотироваться ограничениями параметров. Причина такого условия
состоит в том, что предусловия нельзя ужесточать для подтипов. Напротив, в под-
типах можно добавлять ограничения для возвращаемых значений в любом коли-
честве (постусловия можно ужесточать).

Сообщения
Рекомендуется применять ключ пакета ресурсов для обеспечения интернационализации
// Жестко закодированное сообщение об ошибке
String message() default "Неверный электронный адрес";
// Ключ пакета ресурсов
String message() default "{org.agoncal.book.javaee7.Email.message}";

По умолчанию файл пакета ресурсов называется ValidationMessages.properties
и должен быть указан в пути к классам приложения. Файл построен в виде пар
«ключ — значение», именно это нам и нужно для экстернализации и интернациона-
лизации сообщения об ошибке.
org.agoncal.book.javaee7.Email.message=size must be between {min} and {max}
Джокерные строки {min} и {max} заменяются значениями соот-
ветствующих элементов:

public class Customer {
    @Email
    private String userId;
    @NotNull @Size(min=4, max=50, message = "Имя должно быть от {min} до [max] симолов")
    private String firstName;
    private String lastName;
    @Email(message = "Восстановленный электронный адрес не является действительным")
    private String recoveryEmail;
    private String phoneNumber;
    @Min(value = 18, message = "Покупатель слишком молод. Ему должно быть больше {value} лет")
    private Integer age;
}

